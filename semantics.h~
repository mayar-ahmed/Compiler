#pragma once
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include<map>
using namespace std;
enum M {undeclared=1,uninit=2,assignMismatch=3,compareMismatch=4,numerical=5,uninitVar=6,unusedVar=7,brk=8,cont=9,unusedConst=10};
//extern map<char*,symbolData> symbolTable;
struct symbolData{
char*val;
int type,cl,used;
};
struct num{
char*val;
int type;
};
//Expressions
struct exptype{
int type;	//int, float or bool
int id;		//1-> identifier, 0-> number or boolean value  
char* val;	//Value
char* name;	//name of identifier
};
void addConst(char*,int,char*,int);
void addVar(char*,int);
void checkAssignExp(char*,exptype*);
exptype*createExpr(int i, char* c, int id1, char*n);
exptype* checkArithm(exptype*,char,exptype*);
double calcFloat(double x1, char op, double x2);
long calcInt(long x1, char op, long x2);
char*fToCa(float n);
char*iToCa(int);
bool compareInt(int x1,char*op, int x2);
bool compareFloat(float x1, char*op, float x2);
bool compareBool(bool x1, char*op, bool x2);
exptype* checkComparison(exptype*e1,char*op,exptype*e2);
bool isDeclared(char*id);
char* allocValue(int);
void msg(int m, int l,char* t1,char* t2);
bool isInit(char*id);
void checkAssignBool(char*,char*);
exptype* checkBoolComparison(exptype*e,char*op,bool bolval);
bool invalidExpressions(exptype*e1,exptype*e2);
exptype*checkLogical(exptype*e1,char*op,exptype*e2);
bool logical(bool x1, char*op,bool x2);
void checkCond(exptype*);
void checkBreak();
void checkContinue();
void checkUnused();
num*createNum(int,char*);
void checkType(char*id,int t,int m)
