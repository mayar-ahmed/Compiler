Grammar

    0 $accept: program $end

    1 program: PROGRAM declarations S statements END

    2 err_stmt: error SEMICOLON
    3         | error ')'

    4 type: INT
    5     | FLOAT
    6     | BOOL

    7 const_dec: CONST type IDENTIFIER '=' inum
    8          | CONST type IDENTIFIER '=' fnum
    9          | CONST type IDENTIFIER '=' bval

   10 var_dec: type IDENTIFIER

   11 declaration: const_dec
   12            | var_dec

   13 declarations: %empty
   14             | declarations declaration SEMICOLON
   15             | declarations err_stmt

   16 statements: %empty
   17           | statements statement SEMICOLON
   18           | statements err_stmt

   19 statement: assignment
   20          | if_stmt
   21          | while_stsmt
   22          | do_while_stmt
   23          | for_stmt
   24          | switch_stmt
   25          | BREAK
   26          | CONTINUE

   27 bval: TRUE
   28     | FALSE

   29 assignment: IDENTIFIER '=' expr
   30           | IDENTIFIER '=' bval

   31 fnum: FNUM
   32     | MINUS FNUM

   33 inum: INUM
   34     | MINUS INUM

   35 number: fnum
   36       | inum

   37 expr: fnum
   38     | inum
   39     | IDENTIFIER
   40     | expr PLUS expr
   41     | expr MINUS expr
   42     | expr MUL expr
   43     | expr DIV expr
   44     | expr GT expr
   45     | expr GTE expr
   46     | expr LT expr
   47     | expr LTE expr
   48     | expr NE expr
   49     | expr EQ expr
   50     | expr EQ TRUE
   51     | expr EQ FALSE
   52     | expr NE TRUE
   53     | expr NE FALSE
   54     | expr AND expr
   55     | expr OR expr
   56     | NOT expr
   57     | '(' expr ')'

   58 $@1: %empty

   59 if_: IF '(' expr $@1 ')' THEN statements

   60 if_else: ENDIF

   61 $@2: %empty

   62 if_else: ELSE $@2 statements ENDIF

   63 if_stmt: if_ if_else

   64 $@3: %empty

   65 $@4: %empty

   66 $@5: %empty

   67 while_stsmt: WHILE $@3 '(' expr $@4 ')' '{' $@5 statements '}'

   68 $@6: %empty

   69 $@7: %empty

   70 $@8: %empty

   71 $@9: %empty

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE '(' $@8 expr $@9 ')'

   73 s_stmt: cases default
   74       | cases

   75 $@10: %empty

   76 case: CASE inum COLON $@10 statements

   77 cases: %empty
   78      | cases case

   79 $@11: %empty

   80 default: DEFAULT COLON $@11 statements

   81 $@12: %empty

   82 $@13: %empty

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 ')' '{' $@13 s_stmt '}'

   84 $@14: %empty

   85 $@15: %empty

   86 $@16: %empty

   87 $@17: %empty

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 57 59 67 72 83 88
')' (41) 3 57 59 67 72 83 88
'=' (61) 7 8 9 29 30 88
'{' (123) 67 72 83 88
'}' (125) 67 72 83 88
error (256) 2 3
SEMICOLON (258) 2 14 17
END (259) 1
PROGRAM (260) 1
CONST (261) 7 8 9
S (262) 1
INT (263) 4
FLOAT (264) 5
BOOL (265) 6
AND (266) 54
OR (267) 55
NOT (268) 56
WHILE (269) 67 72
IF (270) 59
THEN (271) 59
ELSE (272) 62
ENDIF (273) 60 62
SWITCH (274) 83
CASE (275) 76
DEFAULT (276) 80
BREAK (277) 25
CONTINUE (278) 26
PLUS (279) 40
MINUS (280) 32 34 41
MUL (281) 42
DIV (282) 43
GTE (283) 45
LTE (284) 47
GT (285) 44
LT (286) 46
EQ (287) 49 50 51
NE (288) 48 52 53
COLON (289) 76 80 88
DO (290) 72
FOR (291) 88
FNUM (292) 31 32
INUM (293) 33 34
TRUE (294) 27 50 52
FALSE (295) 28 51 53
IDENTIFIER (296) 7 8 9 10 29 30 39 83 88


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
err_stmt (49)
    on left: 2 3, on right: 15 18
type (50)
    on left: 4 5 6, on right: 7 8 9 10
const_dec (51)
    on left: 7 8 9, on right: 11
var_dec (52)
    on left: 10, on right: 12
declaration (53)
    on left: 11 12, on right: 14
declarations (54)
    on left: 13 14 15, on right: 1 14 15
statements (55)
    on left: 16 17 18, on right: 1 17 18 59 62 67 72 76 80 88
statement (56)
    on left: 19 20 21 22 23 24 25 26, on right: 17
bval (57)
    on left: 27 28, on right: 9 30
assignment (58)
    on left: 29 30, on right: 19
fnum (59)
    on left: 31 32, on right: 8 35 37
inum (60)
    on left: 33 34, on right: 7 36 38 76
number (61)
    on left: 35 36, on right: 88
expr (62)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
    55 56 57, on right: 29 40 41 42 43 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 59 67 72 88
if_ (63)
    on left: 59, on right: 63
$@1 (64)
    on left: 58, on right: 59
if_else (65)
    on left: 60 62, on right: 63
$@2 (66)
    on left: 61, on right: 62
if_stmt (67)
    on left: 63, on right: 20
while_stsmt (68)
    on left: 67, on right: 21
$@3 (69)
    on left: 64, on right: 67
$@4 (70)
    on left: 65, on right: 67
$@5 (71)
    on left: 66, on right: 67
do_while_stmt (72)
    on left: 72, on right: 22
$@6 (73)
    on left: 68, on right: 72
$@7 (74)
    on left: 69, on right: 72
$@8 (75)
    on left: 70, on right: 72
$@9 (76)
    on left: 71, on right: 72
s_stmt (77)
    on left: 73 74, on right: 83
case (78)
    on left: 76, on right: 78
$@10 (79)
    on left: 75, on right: 76
cases (80)
    on left: 77 78, on right: 73 74 78
default (81)
    on left: 80, on right: 73
$@11 (82)
    on left: 79, on right: 80
switch_stmt (83)
    on left: 83, on right: 24
$@12 (84)
    on left: 81, on right: 83
$@13 (85)
    on left: 82, on right: 83
for_stmt (86)
    on left: 88, on right: 23
$@14 (87)
    on left: 84, on right: 88
$@15 (88)
    on left: 85, on right: 88
$@16 (89)
    on left: 86, on right: 88
$@17 (90)
    on left: 87, on right: 88


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . declarations S statements END

    $default  reduce using rule 13 (declarations)

    declarations  go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM declarations . S statements END
   14 declarations: declarations . declaration SEMICOLON
   15             | declarations . err_stmt

    error  shift, and go to state 5
    CONST  shift, and go to state 6
    S      shift, and go to state 7
    INT    shift, and go to state 8
    FLOAT  shift, and go to state 9
    BOOL   shift, and go to state 10

    err_stmt     go to state 11
    type         go to state 12
    const_dec    go to state 13
    var_dec      go to state 14
    declaration  go to state 15


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 err_stmt: error . SEMICOLON
    3         | error . ')'

    SEMICOLON  shift, and go to state 16
    ')'        shift, and go to state 17


State 6

    7 const_dec: CONST . type IDENTIFIER '=' inum
    8          | CONST . type IDENTIFIER '=' fnum
    9          | CONST . type IDENTIFIER '=' bval

    INT    shift, and go to state 8
    FLOAT  shift, and go to state 9
    BOOL   shift, and go to state 10

    type  go to state 18


State 7

    1 program: PROGRAM declarations S . statements END

    $default  reduce using rule 16 (statements)

    statements  go to state 19


State 8

    4 type: INT .

    $default  reduce using rule 4 (type)


State 9

    5 type: FLOAT .

    $default  reduce using rule 5 (type)


State 10

    6 type: BOOL .

    $default  reduce using rule 6 (type)


State 11

   15 declarations: declarations err_stmt .

    $default  reduce using rule 15 (declarations)


State 12

   10 var_dec: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 20


State 13

   11 declaration: const_dec .

    $default  reduce using rule 11 (declaration)


State 14

   12 declaration: var_dec .

    $default  reduce using rule 12 (declaration)


State 15

   14 declarations: declarations declaration . SEMICOLON

    SEMICOLON  shift, and go to state 21


State 16

    2 err_stmt: error SEMICOLON .

    $default  reduce using rule 2 (err_stmt)


State 17

    3 err_stmt: error ')' .

    $default  reduce using rule 3 (err_stmt)


State 18

    7 const_dec: CONST type . IDENTIFIER '=' inum
    8          | CONST type . IDENTIFIER '=' fnum
    9          | CONST type . IDENTIFIER '=' bval

    IDENTIFIER  shift, and go to state 22


State 19

    1 program: PROGRAM declarations S statements . END
   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt

    error       shift, and go to state 5
    END         shift, and go to state 23
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 20

   10 var_dec: type IDENTIFIER .

    $default  reduce using rule 10 (var_dec)


State 21

   14 declarations: declarations declaration SEMICOLON .

    $default  reduce using rule 14 (declarations)


State 22

    7 const_dec: CONST type IDENTIFIER . '=' inum
    8          | CONST type IDENTIFIER . '=' fnum
    9          | CONST type IDENTIFIER . '=' bval

    '='  shift, and go to state 41


State 23

    1 program: PROGRAM declarations S statements END .

    $default  reduce using rule 1 (program)


State 24

   67 while_stsmt: WHILE . $@3 '(' expr $@4 ')' '{' $@5 statements '}'

    $default  reduce using rule 64 ($@3)

    $@3  go to state 42


State 25

   59 if_: IF . '(' expr $@1 ')' THEN statements

    '('  shift, and go to state 43


State 26

   83 switch_stmt: SWITCH . '(' IDENTIFIER $@12 ')' '{' $@13 s_stmt '}'

    '('  shift, and go to state 44


State 27

   25 statement: BREAK .

    $default  reduce using rule 25 (statement)


State 28

   26 statement: CONTINUE .

    $default  reduce using rule 26 (statement)


State 29

   72 do_while_stmt: DO . '{' $@6 statements '}' $@7 WHILE '(' $@8 expr $@9 ')'

    '{'  shift, and go to state 45


State 30

   88 for_stmt: FOR . '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    '('  shift, and go to state 46


State 31

   29 assignment: IDENTIFIER . '=' expr
   30           | IDENTIFIER . '=' bval

    '='  shift, and go to state 47


State 32

   18 statements: statements err_stmt .

    $default  reduce using rule 18 (statements)


State 33

   17 statements: statements statement . SEMICOLON

    SEMICOLON  shift, and go to state 48


State 34

   19 statement: assignment .

    $default  reduce using rule 19 (statement)


State 35

   63 if_stmt: if_ . if_else

    ELSE   shift, and go to state 49
    ENDIF  shift, and go to state 50

    if_else  go to state 51


State 36

   20 statement: if_stmt .

    $default  reduce using rule 20 (statement)


State 37

   21 statement: while_stsmt .

    $default  reduce using rule 21 (statement)


State 38

   22 statement: do_while_stmt .

    $default  reduce using rule 22 (statement)


State 39

   24 statement: switch_stmt .

    $default  reduce using rule 24 (statement)


State 40

   23 statement: for_stmt .

    $default  reduce using rule 23 (statement)


State 41

    7 const_dec: CONST type IDENTIFIER '=' . inum
    8          | CONST type IDENTIFIER '=' . fnum
    9          | CONST type IDENTIFIER '=' . bval

    MINUS  shift, and go to state 52
    FNUM   shift, and go to state 53
    INUM   shift, and go to state 54
    TRUE   shift, and go to state 55
    FALSE  shift, and go to state 56

    bval  go to state 57
    fnum  go to state 58
    inum  go to state 59


State 42

   67 while_stsmt: WHILE $@3 . '(' expr $@4 ')' '{' $@5 statements '}'

    '('  shift, and go to state 60


State 43

   59 if_: IF '(' . expr $@1 ')' THEN statements

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 66


State 44

   83 switch_stmt: SWITCH '(' . IDENTIFIER $@12 ')' '{' $@13 s_stmt '}'

    IDENTIFIER  shift, and go to state 67


State 45

   72 do_while_stmt: DO '{' . $@6 statements '}' $@7 WHILE '(' $@8 expr $@9 ')'

    $default  reduce using rule 68 ($@6)

    $@6  go to state 68


State 46

   88 for_stmt: FOR '(' . IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    IDENTIFIER  shift, and go to state 69


State 47

   29 assignment: IDENTIFIER '=' . expr
   30           | IDENTIFIER '=' . bval

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    TRUE        shift, and go to state 55
    FALSE       shift, and go to state 56
    IDENTIFIER  shift, and go to state 63

    bval  go to state 70
    fnum  go to state 64
    inum  go to state 65
    expr  go to state 71


State 48

   17 statements: statements statement SEMICOLON .

    $default  reduce using rule 17 (statements)


State 49

   62 if_else: ELSE . $@2 statements ENDIF

    $default  reduce using rule 61 ($@2)

    $@2  go to state 72


State 50

   60 if_else: ENDIF .

    $default  reduce using rule 60 (if_else)


State 51

   63 if_stmt: if_ if_else .

    $default  reduce using rule 63 (if_stmt)


State 52

   32 fnum: MINUS . FNUM
   34 inum: MINUS . INUM

    FNUM  shift, and go to state 73
    INUM  shift, and go to state 74


State 53

   31 fnum: FNUM .

    $default  reduce using rule 31 (fnum)


State 54

   33 inum: INUM .

    $default  reduce using rule 33 (inum)


State 55

   27 bval: TRUE .

    $default  reduce using rule 27 (bval)


State 56

   28 bval: FALSE .

    $default  reduce using rule 28 (bval)


State 57

    9 const_dec: CONST type IDENTIFIER '=' bval .

    $default  reduce using rule 9 (const_dec)


State 58

    8 const_dec: CONST type IDENTIFIER '=' fnum .

    $default  reduce using rule 8 (const_dec)


State 59

    7 const_dec: CONST type IDENTIFIER '=' inum .

    $default  reduce using rule 7 (const_dec)


State 60

   67 while_stsmt: WHILE $@3 '(' . expr $@4 ')' '{' $@5 statements '}'

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 75


State 61

   56 expr: NOT . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 76


State 62

   57 expr: '(' . expr ')'

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 77


State 63

   39 expr: IDENTIFIER .

    $default  reduce using rule 39 (expr)


State 64

   37 expr: fnum .

    $default  reduce using rule 37 (expr)


State 65

   38 expr: inum .

    $default  reduce using rule 38 (expr)


State 66

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   59 if_: IF '(' expr . $@1 ')' THEN statements

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 58 ($@1)

    $@1  go to state 90


State 67

   83 switch_stmt: SWITCH '(' IDENTIFIER . $@12 ')' '{' $@13 s_stmt '}'

    $default  reduce using rule 81 ($@12)

    $@12  go to state 91


State 68

   72 do_while_stmt: DO '{' $@6 . statements '}' $@7 WHILE '(' $@8 expr $@9 ')'

    $default  reduce using rule 16 (statements)

    statements  go to state 92


State 69

   88 for_stmt: FOR '(' IDENTIFIER . $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    $default  reduce using rule 84 ($@14)

    $@14  go to state 93


State 70

   30 assignment: IDENTIFIER '=' bval .

    $default  reduce using rule 30 (assignment)


State 71

   29 assignment: IDENTIFIER '=' expr .
   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 29 (assignment)


State 72

   62 if_else: ELSE $@2 . statements ENDIF

    $default  reduce using rule 16 (statements)

    statements  go to state 94


State 73

   32 fnum: MINUS FNUM .

    $default  reduce using rule 32 (fnum)


State 74

   34 inum: MINUS INUM .

    $default  reduce using rule 34 (inum)


State 75

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   67 while_stsmt: WHILE $@3 '(' expr . $@4 ')' '{' $@5 statements '}'

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 65 ($@4)

    $@4  go to state 95


State 76

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   56     | NOT expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 56 (expr)


State 77

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   57     | '(' expr . ')'

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    ')'    shift, and go to state 96
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89


State 78

   54 expr: expr AND . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 97


State 79

   55 expr: expr OR . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 98


State 80

   40 expr: expr PLUS . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 99


State 81

   41 expr: expr MINUS . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 100


State 82

   42 expr: expr MUL . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 101


State 83

   43 expr: expr DIV . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 102


State 84

   45 expr: expr GTE . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 103


State 85

   47 expr: expr LTE . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 104


State 86

   44 expr: expr GT . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 105


State 87

   46 expr: expr LT . expr

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 106


State 88

   49 expr: expr EQ . expr
   50     | expr EQ . TRUE
   51     | expr EQ . FALSE

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    TRUE        shift, and go to state 107
    FALSE       shift, and go to state 108
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 109


State 89

   48 expr: expr NE . expr
   52     | expr NE . TRUE
   53     | expr NE . FALSE

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    TRUE        shift, and go to state 110
    FALSE       shift, and go to state 111
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 112


State 90

   59 if_: IF '(' expr $@1 . ')' THEN statements

    ')'  shift, and go to state 113


State 91

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 . ')' '{' $@13 s_stmt '}'

    ')'  shift, and go to state 114


State 92

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   72 do_while_stmt: DO '{' $@6 statements . '}' $@7 WHILE '(' $@8 expr $@9 ')'

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    '}'         shift, and go to state 115
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 93

   88 for_stmt: FOR '(' IDENTIFIER $@14 . '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    '='  shift, and go to state 116


State 94

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   62 if_else: ELSE $@2 statements . ENDIF

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    ENDIF       shift, and go to state 117
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 95

   67 while_stsmt: WHILE $@3 '(' expr $@4 . ')' '{' $@5 statements '}'

    ')'  shift, and go to state 118


State 96

   57 expr: '(' expr ')' .

    $default  reduce using rule 57 (expr)


State 97

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   54     | expr AND expr .
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 54 (expr)


State 98

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   55     | expr OR expr .

    AND    shift, and go to state 78
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 55 (expr)


State 99

   40 expr: expr . PLUS expr
   40     | expr PLUS expr .
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    MUL  shift, and go to state 82
    DIV  shift, and go to state 83

    $default  reduce using rule 40 (expr)


State 100

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   41     | expr MINUS expr .
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    MUL  shift, and go to state 82
    DIV  shift, and go to state 83

    $default  reduce using rule 41 (expr)


State 101

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   42     | expr MUL expr .
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    $default  reduce using rule 42 (expr)


State 102

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   43     | expr DIV expr .
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    $default  reduce using rule 43 (expr)


State 103

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   45     | expr GTE expr .
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83

    $default  reduce using rule 45 (expr)


State 104

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   47     | expr LTE expr .
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83

    $default  reduce using rule 47 (expr)


State 105

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   44     | expr GT expr .
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83

    $default  reduce using rule 44 (expr)


State 106

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   46     | expr LT expr .
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83

    $default  reduce using rule 46 (expr)


State 107

   50 expr: expr EQ TRUE .

    $default  reduce using rule 50 (expr)


State 108

   51 expr: expr EQ FALSE .

    $default  reduce using rule 51 (expr)


State 109

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   49     | expr EQ expr .
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87

    $default  reduce using rule 49 (expr)


State 110

   52 expr: expr NE TRUE .

    $default  reduce using rule 52 (expr)


State 111

   53 expr: expr NE FALSE .

    $default  reduce using rule 53 (expr)


State 112

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   48     | expr NE expr .
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87

    $default  reduce using rule 48 (expr)


State 113

   59 if_: IF '(' expr $@1 ')' . THEN statements

    THEN  shift, and go to state 119


State 114

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 ')' . '{' $@13 s_stmt '}'

    '{'  shift, and go to state 120


State 115

   72 do_while_stmt: DO '{' $@6 statements '}' . $@7 WHILE '(' $@8 expr $@9 ')'

    $default  reduce using rule 69 ($@7)

    $@7  go to state 121


State 116

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' . expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 122


State 117

   62 if_else: ELSE $@2 statements ENDIF .

    $default  reduce using rule 62 (if_else)


State 118

   67 while_stsmt: WHILE $@3 '(' expr $@4 ')' . '{' $@5 statements '}'

    '{'  shift, and go to state 123


State 119

   59 if_: IF '(' expr $@1 ')' THEN . statements

    $default  reduce using rule 16 (statements)

    statements  go to state 124


State 120

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 ')' '{' . $@13 s_stmt '}'

    $default  reduce using rule 82 ($@13)

    $@13  go to state 125


State 121

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 . WHILE '(' $@8 expr $@9 ')'

    WHILE  shift, and go to state 126


State 122

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr . $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 85 ($@15)

    $@15  go to state 127


State 123

   67 while_stsmt: WHILE $@3 '(' expr $@4 ')' '{' . $@5 statements '}'

    $default  reduce using rule 66 ($@5)

    $@5  go to state 128


State 124

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   59 if_: IF '(' expr $@1 ')' THEN statements .

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    ELSE   reduce using rule 59 (if_)
    ENDIF  reduce using rule 59 (if_)

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 125

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 ')' '{' $@13 . s_stmt '}'

    $default  reduce using rule 77 (cases)

    s_stmt  go to state 129
    cases   go to state 130


State 126

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE . '(' $@8 expr $@9 ')'

    '('  shift, and go to state 131


State 127

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 . COLON expr COLON number $@16 ')' '{' $@17 statements '}'

    COLON  shift, and go to state 132


State 128

   67 while_stsmt: WHILE $@3 '(' expr $@4 ')' '{' $@5 . statements '}'

    $default  reduce using rule 16 (statements)

    statements  go to state 133


State 129

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 ')' '{' $@13 s_stmt . '}'

    '}'  shift, and go to state 134


State 130

   73 s_stmt: cases . default
   74       | cases .
   78 cases: cases . case

    CASE     shift, and go to state 135
    DEFAULT  shift, and go to state 136

    $default  reduce using rule 74 (s_stmt)

    case     go to state 137
    default  go to state 138


State 131

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE '(' . $@8 expr $@9 ')'

    $default  reduce using rule 70 ($@8)

    $@8  go to state 139


State 132

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON . expr COLON number $@16 ')' '{' $@17 statements '}'

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 140


State 133

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   67 while_stsmt: WHILE $@3 '(' expr $@4 ')' '{' $@5 statements . '}'

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    '}'         shift, and go to state 141
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 134

   83 switch_stmt: SWITCH '(' IDENTIFIER $@12 ')' '{' $@13 s_stmt '}' .

    $default  reduce using rule 83 (switch_stmt)


State 135

   76 case: CASE . inum COLON $@10 statements

    MINUS  shift, and go to state 142
    INUM   shift, and go to state 54

    inum  go to state 143


State 136

   80 default: DEFAULT . COLON $@11 statements

    COLON  shift, and go to state 144


State 137

   78 cases: cases case .

    $default  reduce using rule 78 (cases)


State 138

   73 s_stmt: cases default .

    $default  reduce using rule 73 (s_stmt)


State 139

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE '(' $@8 . expr $@9 ')'

    NOT         shift, and go to state 61
    MINUS       shift, and go to state 52
    '('         shift, and go to state 62
    FNUM        shift, and go to state 53
    INUM        shift, and go to state 54
    IDENTIFIER  shift, and go to state 63

    fnum  go to state 64
    inum  go to state 65
    expr  go to state 145


State 140

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr . COLON number $@16 ')' '{' $@17 statements '}'

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89
    COLON  shift, and go to state 146


State 141

   67 while_stsmt: WHILE $@3 '(' expr $@4 ')' '{' $@5 statements '}' .

    $default  reduce using rule 67 (while_stsmt)


State 142

   34 inum: MINUS . INUM

    INUM  shift, and go to state 74


State 143

   76 case: CASE inum . COLON $@10 statements

    COLON  shift, and go to state 147


State 144

   80 default: DEFAULT COLON . $@11 statements

    $default  reduce using rule 79 ($@11)

    $@11  go to state 148


State 145

   40 expr: expr . PLUS expr
   41     | expr . MINUS expr
   42     | expr . MUL expr
   43     | expr . DIV expr
   44     | expr . GT expr
   45     | expr . GTE expr
   46     | expr . LT expr
   47     | expr . LTE expr
   48     | expr . NE expr
   49     | expr . EQ expr
   50     | expr . EQ TRUE
   51     | expr . EQ FALSE
   52     | expr . NE TRUE
   53     | expr . NE FALSE
   54     | expr . AND expr
   55     | expr . OR expr
   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE '(' $@8 expr . $@9 ')'

    AND    shift, and go to state 78
    OR     shift, and go to state 79
    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81
    MUL    shift, and go to state 82
    DIV    shift, and go to state 83
    GTE    shift, and go to state 84
    LTE    shift, and go to state 85
    GT     shift, and go to state 86
    LT     shift, and go to state 87
    EQ     shift, and go to state 88
    NE     shift, and go to state 89

    $default  reduce using rule 71 ($@9)

    $@9  go to state 149


State 146

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON . number $@16 ')' '{' $@17 statements '}'

    MINUS  shift, and go to state 52
    FNUM   shift, and go to state 53
    INUM   shift, and go to state 54

    fnum    go to state 150
    inum    go to state 151
    number  go to state 152


State 147

   76 case: CASE inum COLON . $@10 statements

    $default  reduce using rule 75 ($@10)

    $@10  go to state 153


State 148

   80 default: DEFAULT COLON $@11 . statements

    $default  reduce using rule 16 (statements)

    statements  go to state 154


State 149

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE '(' $@8 expr $@9 . ')'

    ')'  shift, and go to state 155


State 150

   35 number: fnum .

    $default  reduce using rule 35 (number)


State 151

   36 number: inum .

    $default  reduce using rule 36 (number)


State 152

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number . $@16 ')' '{' $@17 statements '}'

    $default  reduce using rule 86 ($@16)

    $@16  go to state 156


State 153

   76 case: CASE inum COLON $@10 . statements

    $default  reduce using rule 16 (statements)

    statements  go to state 157


State 154

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   80 default: DEFAULT COLON $@11 statements .

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    '}'  reduce using rule 80 (default)

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 155

   72 do_while_stmt: DO '{' $@6 statements '}' $@7 WHILE '(' $@8 expr $@9 ')' .

    $default  reduce using rule 72 (do_while_stmt)


State 156

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 . ')' '{' $@17 statements '}'

    ')'  shift, and go to state 158


State 157

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   76 case: CASE inum COLON $@10 statements .

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    CASE     reduce using rule 76 (case)
    DEFAULT  reduce using rule 76 (case)
    '}'      reduce using rule 76 (case)

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 158

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' . '{' $@17 statements '}'

    '{'  shift, and go to state 159


State 159

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' . $@17 statements '}'

    $default  reduce using rule 87 ($@17)

    $@17  go to state 160


State 160

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 . statements '}'

    $default  reduce using rule 16 (statements)

    statements  go to state 161


State 161

   17 statements: statements . statement SEMICOLON
   18           | statements . err_stmt
   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements . '}'

    error       shift, and go to state 5
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    SWITCH      shift, and go to state 26
    BREAK       shift, and go to state 27
    CONTINUE    shift, and go to state 28
    '}'         shift, and go to state 162
    DO          shift, and go to state 29
    FOR         shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    err_stmt       go to state 32
    statement      go to state 33
    assignment     go to state 34
    if_            go to state 35
    if_stmt        go to state 36
    while_stsmt    go to state 37
    do_while_stmt  go to state 38
    switch_stmt    go to state 39
    for_stmt       go to state 40


State 162

   88 for_stmt: FOR '(' IDENTIFIER $@14 '=' expr $@15 COLON expr COLON number $@16 ')' '{' $@17 statements '}' .

    $default  reduce using rule 88 (for_stmt)
